<?php

define('CONSOLE_SEPARATOR', '============================');

// Define path to application directory
defined('APPLICATION_PATH')
|| define('APPLICATION_PATH', realpath(dirname(__FILE__) . '/../application'));

// Ensure library/ is on include_path
set_include_path(implode(PATH_SEPARATOR, array(
    realpath(APPLICATION_PATH . '/../library'),
    get_include_path(),
)));

// Lets allow the horrible ZF1 autoloading
require_once 'Zend/Loader/Autoloader.php';
$autoloader = Zend_Loader_Autoloader::getInstance();
$autoloader->setFallbackAutoloader(true);


// Options available to us
$options = null;
try {
    $options = new Zend_Console_Getopt(
        array(
            'dest|d=s'    => '(Required) The destination directory you would like to release your site to.',
            'branch|b-w'  => '(Optional) The branch in git you would like to release. Defaults to master.',
            'repo|r-s'    => '(Optional) The location of your repository branch. Defaults to one folder up from here.',
            'backup|bp-s' => '(Optional) The location you want to backup your site to. Defaults to /home/backups/site/',
            'tmp|t-s'     => '(Optional) The temp directory you would like to build your site in. Auto generated if not set.',
            'nobackup|nb' => '(Optional) Don\'t backup original site to /home/backups/ before deploying new version. Requires tar.',
            'quiet|q'     => '           Minimal output.',
            'help|h'      => '           Displays the help message.'
        )
    );
} catch (Zend_Console_Getopt_Exception $e) {
    print $e->getUsageMessage();
    die($e->getMessage());
}


// Set some default script variables
$tmpPathAutoGenerated = false;
$tmpWorkDone = false;

// Set some default variables up, based on the options passed to us
$destination = $options->getOption('d');
$branch = $options->getOption('b');
$repoPath = $options->getOption('r');
$backupPath = $options->getOption('bp');
$tmpPath = $options->getOption('t');
$quiet = $options->getOption('q');
$noBackup = $options->getOption('nb');
$help = $options->getOption('h');

// Show help if it was asked for
if ($help) {
    output(CONSOLE_SEPARATOR, $quiet);
    print $options->getUsageMessage();
    output(CONSOLE_SEPARATOR, $quiet);
    exit;
}

// Set some defaults up if they haven't been passed to us
if (empty($branch)) {
    $branch = 'master';
}
if (empty($repoPath)) {
    $repoPath = realpath(__DIR__ . '/../');
}
if (empty($backupPath)) {
    $backupPath = realpath('/home/backups/site/');
}
if (empty($tmpPath)) {
    $tmpPath = '/tmp/site_' . time();
    if (!mkdir($tmpPath, 0777)) {
        error('Could not create temporary directory');
    }
    $tmpPathAutoGenerated = true;
}

// Check necessary variables are set and are valid
if (empty($destination)) {
    error('You must set a destination to release to');
}
if (!is_dir($destination)) {
    error("$destination is not a valid directory to release to, or does not exist");
}
if (!is_dir($tmpPath)) {
    error("$tmpPath is not a valid directory to build in, or does not exist");
}
if (!$noBackup && !is_dir($backupPath)) {
    error("$backupPath is not a valid directory to backup to, or does not exist");
}


// Check necessary packages are installed
output(CONSOLE_SEPARATOR);
output('Checking necessary programs are installed ...');
// tar
if (!$noBackup) {
    exec('which tar', $tarOutput, $tarReturnValue);
    if ($tarOutput == '') {
        error('tar is not installed and is needed to backup the site');
    }
}
output('All programs necessary are present');
output(CONSOLE_SEPARATOR);


// Initiate git
output('Initializing git ...', $quiet);
$git = new Git_Git($repoPath);
if ($git === false) {
    error('Git is not installed');
}
$git->setQuiet($quiet);
output($git->getVersion(), $quiet);

output('Checking repository path ...', $quiet);
if (!$git->isGitDirectory()) {
    error("Repo Path: $repoPath is not under source control");
}
output('Repository path OK!', $quiet);

output('Checking branch exists ...');
if (!$git->branchExists($branch)) {
    error("Git branch $branch is invalid - please check your input and try again");
}
output('Git branch OK!');
output(CONSOLE_SEPARATOR, $quiet);


output("Deploying branch : $branch");
output("To               : $destination");
output("Via              : $tmpPath");
output(CONSOLE_SEPARATOR);


// Let's get the new contents
// If tmp folder already existed, check if it is under git control
if (!$tmpPathAutoGenerated) {
    $git->setRepositoryPath($tmpPath);
    if ($git->isGitDirectory()) {
        // If it is, lets update and reset it
        output('Updating from existing tmp directory ...');
        $git->fetch($branch);
        output('Resetting contents ...');
        $git->reset();
        $tmpWorkDone = true;
    }
}

// Otherwise let's clone the code into our new tmp folder
if (!$tmpWorkDone) {
    $git->cloneBranch($branch, $tmpPath);
    $git->setRepositoryPath($tmpPath);
    $tmpWorkDone = true;
}

// Update all submodules
output('Initializing submodules ... ');
$git->submoduleUpdate();
output(CONSOLE_SEPARATOR);


// Backup target directory
if (!$noBackup) {
    output('Backing up current version of the site ...');
    exec(
        "tar --exclude='$backupPath' -zc" . ($quiet ? '' : 'v') . "f $backupPath/" . date('Ymdhis') . "-site-backup.tar.gz $destination",
        $backupOutput,
        $backupReturnVar
    );
    if ($backupReturnVar != 0) {
        error('There was a problem backing up the current version of the site');
    }
}

// COPY CONFIG FILES?

// CLEAN TARGET DIRECTORY

// SYNC TMP DIRECTORY TO TARGET DIRECTORY

// CLEAN TMP DIRECTORY


// Helper functions
function output($message, $quiet = false) {
    if ($quiet) {
        return;
    }
    print $message . "\r\n";
}

function error($error) {
    print CONSOLE_SEPARATOR . "\r\n";
    print "Error! \r\n";
    print "Error! $error \r\n";
    print "Error! \r\n";
    print CONSOLE_SEPARATOR . "\r\n";
    exit;
}